{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"location\": \"desconcoida\",\n  \"device\": \"desconocido\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        580
      ],
      "id": "3263eb9d-caa8-4bd0-906a-3a75e40f3f56",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9af3c18a-548b-4c03-a8ba-7ba187991a53",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1820,
        540
      ],
      "id": "96a55835-2b40-490c-a37e-c28ae642be47",
      "name": "If Http error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "287fcf83-d817-439c-a504-867685c375d3",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1940,
        80
      ],
      "id": "4c4ba759-b684-41c9-85a0-db432755508a",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Entradas\nconst selectedRaw = $('Webhook').first().json.body.data.message.conversation;\nconst location = $('Get Active chat').first().json.location_name;\nlet device = $('Get Active chat').first().json.device;\n\nconst company_info = $input.first().json.propertyName;\n\n// Validar que selected sea numérico\nconst selected = parseInt(selectedRaw) -1;\nif (isNaN(selected)) {\n  return [{ json: { error: \"La opción ingresada no es un número válido.\" } }];\n}\n\n// Si la location está vacía, continuar\nif (!location || location.trim() === '') {\n  // obtener listado de locaciones\n  const locations = Object.keys(company_info);\n\n  // validar índice dentro del rango\n  if (selected < 0 || selected >= locations.length) {\n    return [{ json: { error: \"Índice fuera de rango.\" } }];\n  }\n\n  // obtener la locación según índice\n  const selectedLocation = locations[selected];\n  \n  // obtener dispositivos de esa locación\n  const devicesStr = company_info[selectedLocation];\n  const devices = devicesStr.split(',');\n\n  // si solo hay un dispositivo, asignarlo\n  device = devices[0];\n\n  return [{\n    json: {\n      location: selectedLocation,\n      device: device\n    }\n  }];\n} else {\n  // si location ya viene lleno, no hacer nada\n  return [{\n    json: {\n      location: location,\n      device: device\n    }\n  }];\n}\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        700
      ],
      "id": "3d2fdcd6-91fd-40e0-b18b-edafb6f6ac79",
      "name": "Set message"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $json.company }}-{{ $json.category_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1380,
        700
      ],
      "id": "48da1e68-21c0-4fa9-8626-c7739ebe77d8",
      "name": "Get company info",
      "credentials": {
        "redis": {
          "id": "W0acBetWphtKQmC3",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://solutions.fusepong.com/api/app/company/group_device_names_by_location?company_name={{ $json.company }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        420
      ],
      "id": "cf728180-b8cd-42c0-ab32-306f711ad501",
      "name": "Get comapny information",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.user_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1420,
        480
      ],
      "id": "bdc36733-40d7-4252-83ed-1456163fcd16",
      "name": "Select rows from Users",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://evolution_api:8080/message/sendText/{{ $('Webhook').all()[0].json.body.instance}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "123456.+az1"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Webhook').all()[0].json.body.data.key.remoteJid.split('@')[0]}}"
            },
            {
              "name": "text",
              "value": "=Respuesta invalida  Vuleva a intentar"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        580
      ],
      "id": "22c96eb6-e3c2-4d4c-ae65-7f23a149744f",
      "name": "Send Message Error"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.location_name }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "id": "0cebf014-cc45-4468-8086-30f798a47555"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "dont have location"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ac505b3c-bfef-41e0-8323-caff75457ef9",
                    "leftValue": "={{ $json.subcategory_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dont have subcategory"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "02ba2599-9704-46e6-98b8-eb7e66cf5bfb",
                    "leftValue": "={{ $json.solution_gived }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "solution dont gived"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e4b7f63a-f6e5-4380-b529-a3fa8e2ded61",
                    "leftValue": "={{ $json.solution_feedback }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "dont have feetback"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7b705705-5aea-4940-a327-ac317fcfedbe",
                    "leftValue": "={{ $json.solution_feedback }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Summary info"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        640,
        800
      ],
      "id": "8099c2e3-942d-49bd-82d7-f782f7ea0f7a",
      "name": "Evaluate chat content"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": 3,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    },
                    "id": "df3e8af7-ea7c-40f6-a3c5-0cf135607143"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "App problems"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1209f295-18c5-40a8-bd61-ec30857b3b1a",
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": 5,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Other"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d25e8246-c1f9-4ce5-97ed-264277a923b3",
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Updated"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "529a9499-9089-4f8c-89f5-f92ec5eb22cf",
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not updated"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        860,
        340
      ],
      "id": "f5ef4b81-00fc-4da9-89b6-b9e46380514d",
      "name": "Get category flow"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.chat_id }}",
            "category_id": "={{ $('Webhook').item.json.body.data.message.conversation }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        600,
        520
      ],
      "id": "6d71ce8b-c904-484e-b4e6-4d3ca19787ff",
      "name": "Update Category",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "840b5aca-f60d-40da-9963-1ff3ee8f1b00",
                    "leftValue": "={{ $json.chat_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "id": "388f3ca8-e3a1-45a1-906f-4553d67822fd"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dont have category"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f373ca8b-4aa2-4e0e-a303-38eb64a6ce22",
                    "leftValue": "={{ $json.category_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has category"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        60,
        520
      ],
      "id": "9aca862c-b7e1-4217-be33-c0f9e397e407",
      "name": "Evaluate credentials"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH incoming_data AS (\n  SELECT \n    '{{ $json.body.data.key.remoteJid.split(\"@\")[0] }}'::TEXT AS phone\n),\nfound_user AS (\n  SELECT id, company FROM users WHERE phone = (SELECT phone FROM incoming_data)\n),\nopen_chat AS (\n  SELECT *\n  FROM chats\n  WHERE user_id = (SELECT id FROM found_user)\n    AND status = 'open'\n  LIMIT 1\n)\nSELECT\n  oc.id AS chat_id,\n  oc.status,\n  oc.category_id,\n  oc.subcategory_id,\n  oc.location_name,\n  oc.device,\n  oc.summary,\n  oc.created_at,\n  oc.closed_at,\n  oc.solution_feedback,\n  oc,solution_gived,\n  fu.company\nFROM open_chat oc\nJOIN found_user fu ON fu.id = oc.user_id;\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -160,
        540
      ],
      "id": "25fb6c0a-65fc-4cbe-bfe7-0d9609d029c8",
      "name": "Get Active chat",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://evolution_api:8080/message/sendText/{{ $('Webhook').all()[0].json.body.instance}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "changeme_api_key"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Webhook').all()[0].json.body.data.key.remoteJid.split('@')[0]}}"
            },
            {
              "name": "text",
              "value": "={{ $('Set defacult message').item.json.message}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        0
      ],
      "id": "6853288e-9a48-409d-95c3-7eaa27480a2a",
      "name": "Send Message"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nlet message = \"¿Qué problema presenta?\\n\";\n\nitems.forEach(item => {\n  const num = item.json.id;\n  const emojiNum = num <= 10 ? `${num}️⃣` : `${num}.`; // hasta 10 usa emoji, más de 10 con punto\n  message += `${emojiNum} ${item.json.description}\\n`;\n});\n\nreturn [{ json: { message } }];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        0
      ],
      "id": "499b5477-6eb1-47e1-91b3-fb9d563f18b5",
      "name": "Set defacult message"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH incoming_data AS (\n  SELECT \n    '{{ $json.body.data.key.remoteJid.replace(\"@s.whatsapp.net\", \"\") }}'::TEXT AS phone,\n    '{{ $json.body.data.pushName ? $json.body.data.pushName : \"WhatsApp User\" }}'::TEXT AS name,\n    '{{  $json.body.data.message.conversation.split(':')[1].trim()|| null }}'::TEXT AS company -- opcional si viene del JSON\n),\n\nfound_user AS (\n  SELECT id FROM users WHERE phone = (SELECT phone FROM incoming_data)\n),\n\ninserted_user AS (\n  INSERT INTO users (phone, name, company)\n  SELECT phone, name, company\n  FROM incoming_data\n  WHERE NOT EXISTS (SELECT 1 FROM found_user)\n  RETURNING id\n),\n\nfinal_user AS (\n  SELECT id FROM found_user\n  UNION ALL\n  SELECT id FROM inserted_user\n),\n\nupdated_chats AS (\n  UPDATE chats\n  SET status = 'closed',\n      closed_at = CURRENT_TIMESTAMP\n  WHERE user_id = (SELECT id FROM final_user)\n    AND status = 'open'\n  RETURNING *\n)\n\n-- Nuevo chat con categoría y subcategoría opcionalmente en null\nINSERT INTO chats (user_id, category_id, subcategory_id)\nSELECT \n  id,\n  NULL,      -- ← puedes reemplazar por un número si sabes la categoría (ej: 1)\n  NULL      -- ← lo mismo para subcategoría\nFROM final_user;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -40,
        180
      ],
      "id": "4a5c3019-306b-4b45-bd3c-8243f73e5108",
      "name": "Start new chat",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "categories",
          "mode": "list",
          "cachedResultName": "categories"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        0
      ],
      "id": "309cecdc-053c-4cca-8f88-982b5359c646",
      "name": "Get categories for message",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7dd4d37a-268b-47f3-805a-1a51e7ca1c7e",
                    "leftValue": "={{ $json.body.data.message.conversation }}",
                    "rightValue": "Tengo un problema",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Start conversation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "89331ca6-de01-4da3-a9e2-285d6f5cd0fc",
                    "leftValue": "={{ $json.body.data.message.conversation }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Evaluate Conversation Active"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -680,
        200
      ],
      "id": "36036b69-2802-47d4-8ccb-e0827d08b5d6",
      "name": "Evaluate existing or new chat"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "solution_feedback": false,
            "id": "={{ $('Evaluate if has solution').item.json.chat_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "solution_feedback",
              "displayName": "solution_feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2660,
        1240
      ],
      "id": "578a38b8-fe80-4a01-b66b-ad00f9e9d404",
      "name": "Update rows in a table4",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "54248210-ee09-4d45-9241-ea36165bfcb1",
              "leftValue": "={{ $json.end_process }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1700,
        1380
      ],
      "id": "1ead86e5-4466-4fcb-91b3-ac3965939e95",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH params AS (\n  SELECT \n    {{ $json.id }}::INTEGER AS chat_id,\n    {{ $json.category_id }}::INTEGER AS category_id\n),\nfirst_subcategory AS (\n  SELECT id\n  FROM subcategories\n  WHERE category_id = (SELECT category_id FROM params)\n  ORDER BY id\n  LIMIT 1\n),\nupdated_chat AS (\n  UPDATE chats\n  SET\n    category_id = (SELECT category_id FROM params),\n    subcategory_id = (SELECT id FROM first_subcategory),\n    device = 'other',\n    location_name = 'other',\n    solution_feedback = FALSE\n  WHERE id = (SELECT chat_id FROM params)\n  RETURNING *\n)\nSELECT * FROM updated_chat;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2160,
        220
      ],
      "id": "50569df7-4430-4e09-a9bc-75b730b0cc4b",
      "name": "Execute a SQL query4",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "location_name": "Fuse",
            "device": "App"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "solution_feedback",
              "displayName": "solution_feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1520,
        80
      ],
      "id": "e805559e-27e3-4d44-a8be-84245eb26745",
      "name": "Update rows in a table3",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://evolution_api:8080/message/sendText/{{ $('Webhook').all()[0].json.body.instance}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "changeme_api_key"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Webhook').all()[0].json.body.data.key.remoteJid.split('@')[0]}}"
            },
            {
              "name": "text",
              "value": "={{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3780,
        880
      ],
      "id": "e2362b29-13f9-434a-a78f-f396c03fcb00",
      "name": "HTTP Request7"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.chat_id }}",
            "summary": "={{ $('Evaluate existing or new chat').item.json.body.data.message.conversation }}",
            "status": "closed",
            "closed_at": "2025-07-01T14:31:29"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "solution_feedback",
              "displayName": "solution_feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1320,
        1600
      ],
      "id": "4ead8ca7-3fee-446b-993b-fd330678d831",
      "name": "Update rows in a table2",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE chats\nSET\n  solution_feedback = {{ $json.usseles_solution }}\n  {{ $json.usseles_solution ? \", status = 'closed', closed_at = NOW()\" : \"\" }}\nWHERE id = {{ $('Get Active chat').item.json.chat_id }};\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2200,
        1580
      ],
      "id": "555ca1d8-8500-40fc-b030-bb5b0057f648",
      "name": "Execute a SQL query3",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const usseles = $('Evaluate existing or new chat').first().json.body.data.message.conversation;\nlet whatsapp_message;\nlet end_process;\nlet usseles_solution;\nif (usseles == 1) {\n  whatsapp_message = \"✅ Gracias por confiar en nuestro sistema, espero haber ayudado.\";\n  usseles_solution=true;\n  \n   end_process= true;\n} else if (usseles == 2) {\n  whatsapp_message = \"📨 Vamos a escalar tu caso a un asesor para brindarte una atención más detallada. Por favor, cuéntanos exactamente lo que ocurrió con todos los detalles posibles, y enviaremos la información al equipo correspondiente.\";\n  usseles_solution=false;\n  end_process= true;\n} else {\n  whatsapp_message = \"⚠️ La opción ingresada no es válida, por favor intente de nuevo.\";\n  end_process= false;\n  usseles_solution= false;\n}\n\nreturn [\n  {\n    json: {\n      end_process,\n      \n      whatsapp_message,\n      usseles_solution\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        1280
      ],
      "id": "cc614cc5-5c5d-4267-bd24-f53d3e20d4ca",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH params AS (\n  SELECT \n    {{ $json.category_id }}::INTEGER AS category_id,\n    '{{ $('Evaluate existing or new chat').item.json.body.data.message.conversation }}'::INTEGER AS row_number,\n    {{ $json.chat_id }}::INTEGER AS chat_id\n),\nselected_subcategory AS (\n  SELECT *\n  FROM subcategories\n  WHERE category_id = (SELECT category_id FROM params)\n    AND related_subcategory_id IS NULL\n  ORDER BY id\n  LIMIT 1\n  OFFSET (SELECT row_number - 1 FROM params)\n),\nupdated_chat AS (\n  UPDATE chats\n  SET subcategory_id = (SELECT id FROM selected_subcategory)\n  WHERE id = (SELECT chat_id FROM params)\n  RETURNING *\n)\nSELECT\n  sc.id AS subcategory_id,\n  sc.name AS subcategory_name,\n  sc.solution,\n  uc.id AS chat_id,\n  uc.category_id,\n  uc.subcategory_id\nFROM selected_subcategory sc\nJOIN updated_chat uc ON uc.subcategory_id = sc.id;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1280,
        900
      ],
      "id": "1c80e374-bd14-4f16-8ae4-aa3aae2b0158",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// obtiene el array del input\nconst issues = $input.all().map(item => item.json);\n\n// construye el mensaje enumerado con ids autoincrementales\nlet message = \"*¿Qué problema se asocia a lo que estás pasando?*\\n\";\nmessage += \"Por favor elige una opción:\\n\\n\";\n\n// enumerar del 1 en adelante\nissues.forEach((issue, index) => {\n  const number = index + 1;\n  message += `${number}️⃣ *${issue.name}*\\n`;\n});\n\n// salida\nreturn [\n  {\n    json: {\n      message: message\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3460,
        620
      ],
      "id": "816f416c-9eb8-4699-9996-7751002d0842",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "subcategories",
          "mode": "list",
          "cachedResultName": "subcategories"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "category_id",
              "value": "={{ $json.category_id }}"
            },
            {
              "column": "related_subcategory_id",
              "condition": "IS NULL"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3140,
        500
      ],
      "id": "d9eaefa4-2281-403a-9871-657e925a2a51",
      "name": "Select rows from a table2",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Get Active chat').item.json.chat_id }}",
            "location_name": "={{ $json.location }}",
            "device": "={{ $json.device }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2800,
        740
      ],
      "id": "a06fa44f-9e85-4a63-8872-87966b38ee3d",
      "name": "Update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Select rows from Users').item.json.company }}-{{ $('Update Category').item.json.category_id }}",
        "value": "={{ $json[$json.keys()[ $('Update Category').item.json.category_id -1]] }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1820,
        320
      ],
      "id": "0f59c3ee-7b75-463f-806a-cd97e43e3991",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "W0acBetWphtKQmC3",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const request_response = $input.first().json;\nconst category_id = $('Update Category').first().json.category_id;\n\nlet locations = [];\nlet message = '';\n\nif (category_id === 1) {\n  // mostrar locaciones de zero_or_one\n  locations = Object.keys(request_response.access_with_zero_or_one_scan_peripheral);\n  message = \"¿En qué locación presentas el problema?\\n\";\n} else if (category_id === 2) {\n  // mostrar locaciones de multiple\n  locations = Object.keys(request_response.access_with_multiple_scan_peripherals);\n  message = \"¿En qué locación presentas el problema?\\n\";\n} else if (category_id === 4) {\n  // cámaras\n  locations = Object.keys(request_response.cameras);\n  message = \"¿En qué cámara presentas el problema?\\n\";\n} else {\n  message = \"No hay opciones disponibles para esta categoría.\";\n  return [{ json: { message } }];\n}\n\n// construir enumeración con emojis numéricos\nlocations.forEach((loc, index) => {\n  const num = index + 1;\n  let numberEmoji = '';\n\n  if (num <= 9) {\n    numberEmoji = `${num}️⃣`; // 1️⃣ - 9️⃣\n  } else {\n    // convierte 10, 11, etc. a “1️⃣0️⃣”, “1️⃣1️⃣”, etc.\n    numberEmoji = num\n      .toString()\n      .split('')\n      .map(digit => `${digit}️⃣`)\n      .join('');\n  }\n\n  message += `${numberEmoji} ${loc}\\n`;\n});\nconst lenght =locations.length\n\n\nreturn [{ json: { message , lenght} }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        440
      ],
      "id": "9a70d46f-7a13-4130-b209-b2fcc51c2e2b",
      "name": "FilterCompanyInfo"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2ccab0a0-6677-44be-8028-6019d4a91ec6",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1180,
        180
      ],
      "id": "89e30ccc-3630-4f54-9213-860bdaab4ea6",
      "name": "Webhook",
      "webhookId": "2ccab0a0-6677-44be-8028-6019d4a91ec6"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "subcategories",
          "mode": "list",
          "cachedResultName": "subcategories"
        },
        "where": {
          "values": [
            {
              "column": "related_subcategory_id",
              "value": "={{ $json.subcategory_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1720,
        1120
      ],
      "id": "7aa2b582-4465-4dc3-8349-005ed257c027",
      "name": "Select rows from a table",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH params AS (\n  SELECT \n    {{ $json.chat_id }}::INTEGER AS chat_id,\n    '{{ $('Evaluate existing or new chat').item.json.body.data.message.conversation }}'::INTEGER AS row_number\n),\ncurrent_subcategory AS (\n  SELECT subcategory_id\n  FROM chats\n  WHERE id = (SELECT chat_id FROM params)\n),\ncandidate_subcategories AS (\n  SELECT *\n  FROM subcategories\n  WHERE related_subcategory_id = (SELECT subcategory_id FROM current_subcategory)\n  ORDER BY id\n  LIMIT 1\n  OFFSET (SELECT row_number - 1 FROM params)\n),\nupdated_chat AS (\n  UPDATE chats\n  SET subcategory_id = (SELECT id FROM candidate_subcategories)\n  WHERE id = (SELECT chat_id FROM params)\n  RETURNING *\n)\nSELECT\n  cs.id AS new_subcategory_id,\n  cs.name AS new_subcategory_name,\n  cs.solution,\n  uc.id AS chat_id,\n  uc.category_id,\n  uc.subcategory_id\nFROM candidate_subcategories cs\nJOIN updated_chat uc ON uc.subcategory_id = cs.id;\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1300,
        1160
      ],
      "id": "2f408b6d-952b-4f4c-b682-d4a9419634d8",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a3bd4aaf-9757-4646-ad00-26e544bc4a74",
              "leftValue": "={{ $json.solution }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1520,
        1060
      ],
      "id": "9734ba2b-8e3e-4aa5-881d-475202729817",
      "name": "Evaluate if has solution"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "141f53a2-9c90-4bf5-a6fe-403097c7851b",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2380,
        1100
      ],
      "id": "e16a7ceb-71f2-4515-afc3-182f7d521f60",
      "name": "Evaluate if has subcategories"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97c78f32-27bd-42f7-a559-b62d631d3195",
              "name": "message",
              "value": "✅ Gracias. Próximamente un asesor se pondrá en contacto contigo.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2220,
        1760
      ],
      "id": "2e16157e-95f2-4766-9991-a3772480cfca",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "50e085cc-aedc-4817-8697-11fc34448690",
              "name": "message",
              "value": "📨 Vamos a escalar tu caso a un asesor para brindarte una atención más detallada. Por favor, cuéntanos exactamente lo que ocurrió con todos los detalles posibles, y enviaremos la información al equipo correspondiente.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3000,
        1020
      ],
      "id": "a587ab4b-8bd9-478d-838c-0482fca8bf17",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6542dc20-3748-4ea9-a03e-cd84640b1594",
              "name": "=message",
              "value": "={{ $json.whatsapp_message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2360,
        1420
      ],
      "id": "a861816a-fd3e-474f-b8e1-a8fed4907307",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chats",
          "mode": "list",
          "cachedResultName": "chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "solution_gived": true,
            "id": "={{ $json.chat_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "subcategory_id",
              "displayName": "subcategory_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "location_name",
              "displayName": "location_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "solution_gived",
              "displayName": "solution_gived",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "solution_feedback",
              "displayName": "solution_feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "closed_at",
              "displayName": "closed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1700,
        920
      ],
      "id": "45da550b-93fa-46eb-bf3e-64b7f32d5c45",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "wd0lPLDbjGoUEKAA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c1fbdf1c-12d5-47f7-835a-e0d398d8062c",
              "name": "message",
              "value": "=*Solución sugerida:* \n\n{{ $('Evaluate if has solution').item.json.solution.replace(/\\\\n/g, '\\n') }}\n\n¿Esta solución fue útil? \n\n1️⃣ Sí \n2️⃣ No",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2380,
        880
      ],
      "id": "ca0a700a-f7c5-48d1-938c-934f1461c265",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4ce73093-3c80-4879-9795-01e8f6492038",
              "leftValue": "={{ $json.lenght }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2260,
        460
      ],
      "id": "30d7c05f-b1cf-44a8-ab9b-7dfd78586629",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "If Http error": {
      "main": [
        [
          {
            "node": "FilterCompanyInfo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get company info": {
      "main": [
        [
          {
            "node": "Set message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get comapny information": {
      "main": [
        [
          {
            "node": "If Http error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from Users": {
      "main": [
        [
          {
            "node": "Get comapny information",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate chat content": {
      "main": [
        [
          {
            "node": "Get company info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update rows in a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get category flow": {
      "main": [
        [
          {
            "node": "Update rows in a table3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute a SQL query4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Select rows from Users",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Message Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Category": {
      "main": [
        [
          {
            "node": "Get category flow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate credentials": {
      "main": [
        [],
        [
          {
            "node": "Update Category",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evaluate chat content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active chat": {
      "main": [
        [
          {
            "node": "Evaluate credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set defacult message": {
      "main": [
        [
          {
            "node": "Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get categories for message": {
      "main": [
        [
          {
            "node": "Set defacult message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate existing or new chat": {
      "main": [
        [
          {
            "node": "Start new chat",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get categories for message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Active chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table4": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query4": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table3": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Evaluate if has solution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Select rows from a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set message": {
      "main": [
        [
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table1": {
      "main": [
        [
          {
            "node": "Select rows from a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FilterCompanyInfo": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Evaluate existing or new chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Evaluate if has subcategories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Evaluate if has solution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate if has solution": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate if has subcategories": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update rows in a table4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9924bd11-6f6c-4c5b-b29c-29caa413f7f0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f6924a53de745a3695c7732e502e04aca3d8a4b36fe34648a5946c6d01d805c2"
  },
  "id": "ZP5HizwLOtZlCHMZ",
  "tags": []
}